package lohnsteuer

from math import calc_min, calc_max

from lohnsteuerParam import lohnsteuerEinkommensgrenzen
from einkommenssteuerAbzüge import alleinerziehendFreibetrag, sparerWerbungskostenPauschbetrag, sonderausgabenpauschbetrag, vorsorgepauschaleMindestanteil, vorsorgepauschaleKvMax, vorsorgepauschaleRentenversicherungsAnteil, kinderFreibetrag
from sozialversicherungsbeitrag import gesetzlicheKrankenversicherung, gesetzlicheRentenversicherung, beitragsbemessungsgrenze
from einkommenssteuerParam import einkommenssteuerTarif

from freibeträge import kinderfreibetragAnzahlAnsprüche
from einkommenssteuer import tarif

from gesetzlicheKrankenversicherung import bruttolohnRegulärBeschäftigt as krankenversicherungBruttolohnRegulärBeschäftigt
from gesetzlicheKrankenversicherung import zusatzbeitragssatz as krankenversicherungZusatzbeitragssatz

from gesetzlichePflegeversicherung import beitragssatz as pflegeversicherungBeitragssatz

data per month bruttolohn: Float;
data steuerklasse: Int;
data wohnortOst: Boolean;

/**
 * Calculate tax base for Lohnsteuer (withholding tax on earnings).
 */
public function per year einkommen(): Float {
    var entlastung_freibetrag_alleinerz = alleinerziehendFreibetrag;
    if (steuerklasse != 2) {
        entlastung_freibetrag_alleinerz = 0.0;
    }

    var werbungskosten = 0
    var sonderausgaben = 0
    if (steuerklasse != 6) {
        werbungskosten = sparerWerbungskostenPauschbetrag
        sonderausgaben = sonderausgabenpauschbetrag
    }

    # Zu versteuerndes Einkommen / tax base for Lohnsteuer.
    var out = calc_max(
        12 * per month bruttolohn
        - werbungskosten
        - sonderausgaben
        - entlastung_freibetrag_alleinerz
        - per year vorsorgePauschale(),
        0.0
    )

    return out;
}

/**
 * Berechnung der Lohnsteuer für die Steuerklassen 5 und 6, basierend auf dem zu versteuernden Einkommen.
 */
private function berechneLohnsteuerKlasse5_6Basis(zuVersteuerndesEinkommen: Float): Float {
    return calc_max(
        2 * (
            tarif(zuVersteuerndesEinkommen * 1.25) - tarif(zuVersteuerndesEinkommen * 0.75)),
        zuVersteuerndesEinkommen * einkommenssteuerTarif[0][1]
    );
}

/**
 * Berechnung der Vorsorgepauschale für die Krankenversicherung (Option B), differenziert nach den
 * zeitlichen Validitäten.
 */
public function per year vorsorgeKrankenversicherungOptionB(): Float  {
    from 2015-01-01 to 2018-12-31 {
        return krankenversicherungBruttolohnRegulärBeschäftigt() * 12 * (
            gesetzlicheKrankenversicherung["ermäßigt"] / 2
            + krankenversicherungZusatzbeitragssatz() / 100
            + pflegeversicherungBeitragssatz()
        );
    }

    from 2019-01-01 {
        return bruttolohn * 12 * (
            gesetzlicheKrankenversicherung["ermäßigt"] / 2
            + krankenversicherungZusatzbeitragssatz() / 2 / 100
            + pflegeversicherungBeitragssatz()
        );
    }
}

/**
 * Berechnung der Vorsorgepauschale für die Krankenversicherung (Option A).
 */
public function per year vorsorgeKrankenversicherungOptionA(): Float {
    var basisPauschale = vorsorgepauschaleMindestanteil * bruttolohn;

    var maxPauschale: Int = 0;
    if (steuerklasse == 3) {
        var maxPauschale = vorsorgepauschaleKvMax["steuerklasse3"];
    } else {
        var maxPauschale = vorsorgepauschaleKvMax["steuerklasseNicht3"];
    }

    return calc_min(maxPauschale, basisPauschale);
}

/**
 * Berechnung der Vorsorgepauschale für die Lohnsteuer ab dem Jahr 2010.
 */
public function per year vorsorgePauschale(): Float{
    from 2005-01-01 {
        return 0.0;
    }

    from 2010-01-01 {
        var bruttolohnRente: Float = 0.0;
        if (wohnortOst) {
            bruttolohnRente = calc_min(
                bruttolohn * 12,
                beitragsbemessungsgrenze["ges_rentenv"]["ost"] * 12
            );
        } else {
            bruttolohnRente = calc_min(
                bruttolohn * 12,
                beitragsbemessungsgrenze["ges_rentenv"]["west"] * 12
            );
        }

        # TODO: vorsorgepauschaleRentenversicherungsAnteil is piecewise polynomial param
        var vorsorgeRente = 0.0;
        # var vorsorgeRente = bruttolohnRente
        #     * gesetzlicheRentenversicherung
        #     * vorsorgepauschaleRentenversicherungsAnteil;

        var vorsorgeKrankenversicherung = calc_max(vorsorgeKrankenversicherungOptionA(), vorsorgeKrankenversicherungOptionB());

        return vorsorgeRente + vorsorgeKrankenversicherung;
    }
}

/**
 * Berechnung des Kinderfreibetrags für die Lohnsteuer und den Solidaritätszuschlag.
 */
public function per year kinderfreibetragFürLohnsteuerSoli(): Float {
    var kinderfreibetragBasis = kinderFreibetrag["sächlichesExistenzminimum"] + kinderFreibetrag["beitragErziehungAusbildung"];

    if (steuerklasse == 1 or steuerklasse == 2 or steuerklasse == 3) {
        return kinderfreibetragBasis * 2 * kinderfreibetragAnzahlAnsprüche();
    }
    if (steuerklasse == 4) {
        return kinderfreibetragBasis * kinderfreibetragAnzahlAnsprüche();
    } else {
        return 0.0;
    }
}

public function per month lohnsteuer(einkommen: Float, steuerklasse: Int): Float {
    var lohnsteuerBasistarif = tarif(einkommen);
    var lohnsteuerSplittingtarif = 2 * tarif(einkommen) / 2;
    var lohnsteuerKlasse5_6Basis = berechneLohnsteuerKlasse5_6Basis(einkommen);

    var grenze1 = lohnsteuerEinkommensgrenzen[0];
    var grenze2 = lohnsteuerEinkommensgrenzen[1];
    var grenze3 = lohnsteuerEinkommensgrenzen[2];

    var lohnsteuerGrenze1 = berechneLohnsteuerKlasse5_6Basis(grenze1);
    var maxLohnsteuer = lohnsteuerGrenze1 + (einkommen - grenze1) * einkommenssteuerTarif[3]["rate_linear"];

    var lohnsteuerGrenze2 = berechneLohnsteuerKlasse5_6Basis(grenze2);
    var lohnsteuerZwischenGrenze2_3 = (grenze3 - grenze2) * einkommenssteuerTarif[3]["rate_linear"];
    var lohnsteuerKlasse5_6Tmp = lohnsteuerGrenze2 + lohnsteuerZwischenGrenze2_3;

    var lohnsteuerKlasse5_6= 0.0;
    if (einkommen < grenze1) {
        lohnsteuerKlasse5_6 = lohnsteuerKlasse5_6Basis;
    } else { if (grenze1 <= einkommen and einkommen < grenze2) {
        lohnsteuerKlasse5_6 = calc_min(maxLohnsteuer, berechneLohnsteuerKlasse5_6Basis(einkommen));
    } else { if (grenze2 <= einkommen and einkommen < grenze3) {
        lohnsteuerKlasse5_6 = lohnsteuerGrenze2 + (einkommen - grenze2) * einkommenssteuerTarif[3]["rate_linear"];
    } else {
        lohnsteuerKlasse5_6 = lohnsteuerKlasse5_6Tmp + (einkommen - grenze3) * einkommenssteuerTarif[4]["rate_linear"];
    }
    }
    }

    var lohnsteuer= 0.0;
    if (steuerklasse == 1 or steuerklasse == 2 or steuerklasse == 4) {
        lohnsteuer = lohnsteuerBasistarif;
    } else { if (steuerklasse == 3) {
        lohnsteuer = lohnsteuerSplittingtarif;
    } else {
        lohnsteuer = lohnsteuerKlasse5_6;
    }
    }

    return calc_max(lohnsteuer / 12, 0.0);
}

/**
 * Berechnet die Lohnsteuer unter Berücksichtigung des Kinderfreibetrags.
 * Diese Berechnung wird hauptsächlich für die Berechnung des Solidaritätszuschlags
 * auf die Lohnsteuer verwendet.
 */
public function per month lohnsteuerMitKinderfreibetrag(): Float {
    var angepasstesEinkommen = calc_max(einkommen() - kinderfreibetragFürLohnsteuerSoli(), 0.0);

    return lohnsteuer(angepasstesEinkommen, steuerklasse);
}
