package einkomensgrenzen

from sozialversicherungsbeitrag import geringfügigeEinkommensgrenzenMonatlich, mindestlohn, geringfügigeEinkommensfaktor, geringfügigeEinkommensdivisor, beitragssatz

/**
 * Select the income threshold depending on place of living.
 */
public function minijobGrenze(): Float per month {
    to 1999-12-31 {
        var west = geringfügigeEinkommensgrenzenMonatlich[minijob][west]
        var ost = geringfügigeEinkommensgrenzenMonatlich[minijob][ost]
        if wohnort_ost() {
            return ost
        } else {
            return west
        }
    }

    from 2000-01-01 to 2022-09-30 {
        return geringfügigeEinkommensgrenzenMonatlich[minijob]
    }

    /**
     * Obtains marginal job threshold since 10/2022. Since then, it is calculated from
     * the statutory minimum wage.
     */
    from 2022-10-01 {
        return mindestlohn * geringfügigeEinkommensfaktor / geringfügigeEinkommensdivisor
    }
}

/**
 * Check if individual earns less than marginal employment threshold.
 * Marginal employed pay no social insurance contributions.
 * Legal reference: § 8 Abs. 1 Satz 1 and 2 SGB IV
 */
public function geringfügigBeschäftigt(bruttolohn per month): Boolean {
    return bruttolohn per month <= minijobGrenze()
}

/**
 * Check if individual's income is in midi-job range.
 * Employed people with their wage in the range of gleitzone pay reduced social
 * insurance contributions.
 * Legal reference: § 20 Abs. 2 SGB IV
 */
public function inGleitzone(bruttolohn per month): Boolean {
    from 2003-04-01 {
        return (bruttolohn per month <= geringfügigeEinkommensgrenzenMonatlich[midijob]) and (not geringügigBeschäftigt(bruttolohn per month));
    }
}

public function midijobFaktorF(): Float {
    /**
     * Midijob Faktor F until December 2004.
     * Legal reference: § 163 Abs. 10 SGB VI
     */
    from 2003-04-01 to 2004-12-31 {
        # First calculate the factor F from the formula in § 163 (10) SGB VI
        # Therefore sum the contributions which are the same for employee and employer
        var allg_sozialv_beitr = (
            beitragssatz[gesetzlicheRentenversicherung]
            + beitragssatz[arbeitslosenversicherung]
        );

        allg_sozialv_beitr = allg_sozialv_beitr + beitragssatz[ges_pflegev];

        # Then calculate specific shares
        var an_anteil = allg_sozialv_beitr + gesetzlicheKrankenversicherungBeitragssatzJahresanfang();
        var ag_anteil = allg_sozialv_beitr + gesetzlicheKrankenversicherungBeitragssatzArbeitgeberJahresanfang();

        # Sum over the shares which are specific for midijobs.
        var pausch_mini = (
            pauschalabgabenGeringfügigeBeschäftigung[ges_krankenv]
            + pauschalabgabenGeringfügigeBeschäftigung[ges_rentenv]
            + pauschalabgabenGeringfügigeBeschäftigung[st]
        );

        # Now calculate final factor
        return pausch_mini / (an_anteil + ag_anteil)
    }

    /**
     * Midijob Faktor F between 2005 and September 2025.
     * Legal reference: § 163 Abs. 10 SGB VI
     */
    from 2005-01-01 {
        # First calculate the factor F from the formula in § 163 (10) SGB VI
        # Therefore sum the contributions which are the same for employee and employer
        var allg_sozialv_beitr = (
            beitragssatz[gesetzlicheRentenversicherung]
            + beitragssatz[arbeitslosenversicherung]
        );

        allg_sozialv_beitr += beitragssatz[gesetzlichePflegeversicherung][standard]

        # Then calculate specific shares
        var an_anteil = allg_sozialv_beitr + gesetzlicheKrankenversicherungBeitragssatzJahresanfang();
        var ag_anteil = allg_sozialv_beitr + gesetzlicheKrankenversicherungBeitragssatzArbeitgeberJahresanfang();

        # Sum over the shares which are specific for midijobs.
        var pausch_mini = (
            pauschalabgabenGeringfügigeBeschäftigung[ges_krankenv]
            + pauschalabgabenGeringfügigeBeschäftigung[ges_rentenv]
            + pauschalabgabenGeringfügigeBeschäftigung[st]
        );

        # Now calculate final factor
        return pausch_mini / (an_anteil + ag_anteil)
    }

    from 2022-10-01 {
        # Calculate the Gesamtsozialversicherungsbeitragssatz by summing social
        # insurance contributions for employer and employee and
        # adding the mean Zusatzbeitrag
        # First calculate the factor F from the formula in § 163 (10) SGB VI
        # Therefore sum the contributions which are the same for employee and employer
        var allg_sozialv_beitr = (
            beitragssatz[gesetzlicheRentenversicherung]
            + beitragssatz[gesetzlichePflegeversicherung][standard]
            + beitragssatz[arbeitslosenversicherung]
        );

        # Then calculate specific shares
        var an_anteil = allg_sozialv_beitr + gesetzlicheKrankenversicherungBeitragssatzJahresanfang();
        var ag_anteil = allg_sozialv_beitr + gesetzlicheKrankenversicherungBeitragssatzArbeitgeberJahresanfang();

        # Sum over the shares which are specific for midijobs.
        # New formula only inludes the lump-sum contributions to health care
        # and pension insurance
        var pausch_mini = (
            pauschalabgabenGeringfügigeBeschäftigung[ges_krankenv]
            pauschalabgabenGeringfügigeBeschäftigung[ges_rentenv]
        )

        # Now calculate final factor f
        return pausch_mini / (an_anteil + ag_anteil)
    }
}

/**
 * Income subject to social insurance contributions for midijob until September
 * 2022.
 * Bemessungsgeld (Gleitzonenentgelt) is the reference income for midijobs subject to
 * social insurance contribution.
 * Legal reference: § 163 Abs. 10 SGB VI
 */
public function midijobBemessungsentgeld(bruttolohn per month): Float per month {
    from 2003-04-01 {
        # Now use the factor to calculate the overall bemessungsentgelt
        var minijob_anteil = midijobFaktorF() * minijobGrenze()
        var lohn_über_mini = bruttolohn per month - minijobGrenze()
        var gewichtete_midijob_rate = (
            geringfügigeEinkommensgrenzenMonatlich[midijob]
            / (
                geringfügigeEinkommensgrenzenMonatlich[midijob]
                - minijobGrenze()
            )
        ) - (
            minijobGrenze()
            / (
                geringfügigeEinkommensgrenzenMonatlich[midijob]
                - minijobGrenze()
            )
            * midijobFaktorF()
        )

        return minijob_anteil + lohn_über_mini * gewichtete_midijob_rate
    }

    /**
     * Total income subject to social insurance contributions for employers a and
     * employees for midijob since October 2022. In the law, the considered income is
     * referred to as "beitragspflichtige Einnahme".
     * Beitragspflichtige Einnahme is the reference income for midijobs subject
     * to employer and employee social insurance contribution.
     * Legal reference: Changes in § 20 SGB IV from 01.10.2022
     */
    from 2022-10-01 {
        var midijob_grenze = geringfügigeEinkommensgrenzenMonatlich[midijob]

        var quotient1 = (midijob_grenze) / (midijob_grenze - minijobGrenze())
        var quotient2 = (minijobGrenze()) / (midijob_grenze - minijobGrenze())
        var einkommen_diff = bruttolohn per month - minijobGrenze()

        var faktor1 = midijobFaktorF * minijobGrenze()
        var faktor2 = (quotient1 - quotient2 * midijobFaktorF) * einkommen_diff
        return faktor1 + faktor2
    }
}

/**
 * Income subject to employee social insurance contributions for midijob since
 * October 2022.
 * Gesonderte Beitragspflichtige Einnahme is the reference income for midijobs subject
 * to employee social insurance contribution.
 * Legal reference: Changes in § 20 SGB IV from 01.10.2022
 */
private function midijobBeitragspflichtigeEinnahmeArbeitnehmer(bruttolohn per month): Float per month {
    var midijob_grenze = geringfügigeEinkommensgrenzenMonatlich[midijob]

    var quotient = midijob_grenze / (midijob_grenze - minijobGrenze())
    var einkommen_diff = bruttolohn per month - minijobGrenze()

    return quotient * einkommen_diff
}


public function regulärBeschäftigt(bruttolohn per month): Boolean {
    /**
    * Regular employment check until March 2003.
    * Employees earning more than the minijob threshold, are subject to all ordinary
    * income and social insurance contribution regulations. In gettsim we call these
    * regular employed.
    */
    to 2003-03-31 {
        return bruttolohn per month >= minijobGrenze()
    }

    /**
     * Regular employment check since April 2003.
     * Employees earning more than the midijob threshold, are subject to all ordinary
     * income and social insurance contribution regulations. In gettsim we call these
     * regular employed.
     */
    from 2003-04-01 {
        return bruttolohn per month >= geringfügigeEinkommensgrenzenMonatlich[midijob]
    }
}
